#!/usr/bin/env node

const { exec } = require("child_process");

// Function to fetch dependencies recursively
async function getAllDependencies(packageName, flatDeps = new Map(), visited = new Set()) {
  if (visited.has(packageName)) return;
  visited.add(packageName);

  // const spinner = ora(`Fetching dependencies for ${packageName}...`).start();
  console.log(`Fetching dependencies for ${packageName}...`);
  
  
  return new Promise((resolve) => {
    exec(`npm info ${packageName} dependencies --json`, (error, stdout, stderr) => {
      // spinner.stop();

      if (error || stderr) {
        // console.error(chalk.red(`Error fetching ${packageName}`));
        console.error(`Error fetching ${packageName}`);
        resolve();
        return;
      }

      let dependencies;
      try {
        dependencies = JSON.parse(stdout || "{}");
      } catch (err) {
        // console.error(chalk.red(`Failed to parse dependencies for ${packageName}`));
        console.error(`Failed to parse dependencies for ${packageName}`);
        resolve();
        return;
      }

      Object.entries(dependencies).forEach(([dep, version]) => {
        if (!flatDeps.has(dep)) {
          flatDeps.set(dep, version);
          getAllDependencies(dep, flatDeps, visited); // Recursively fetch deps
        }
      });

      resolve();
    });
  });
}

// Get package name from CLI args
const packageName = process.argv[2];

if (!packageName) {
  console.error(chalk.red("Usage: node index.js <package-name>"));
  console.error("Usage: node index.js <package-name>");
  process.exit(1);
}

// Fetch and display dependencies
(async () => {
  const flatDeps = new Map();
  await getAllDependencies(packageName, flatDeps);
  
  // console.log(chalk.green("\nAll Dependencies:\n"));
  console.log("\nAll Dependencies:\n");
  console.log(Object.fromEntries(flatDeps)); // Print as JSON object
})();